import { Component, OnDestroy, OnInit } from "@angular/core";
import { AngularFirestoreCollection, AngularFirestore, DocumentSnapshot } from "@angular/fire/compat/firestore";
import { Subscription } from "rxjs";

import { DraggedElementType, IForm } from "./form-types";

@Component({
  selector: 'forms',
  templateUrl: './forms.component.html',
})
export class FormsComponent implements OnInit, OnDestroy {
  public formsByLocation: IForm[] = [];

  private orgId = '96';
  private locationId = '107';
  private todayStr = "2022-04-18"; // TODO update to see today's stuff
  private subscriptions = new Subscription();
  private firestoreFormsSubscription: Subscription;

  constructor(private afs: AngularFirestore) {}
  
  public ngOnInit(): void {
    this.setupFirestoreFormsListener();
  }

  public ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }

  // get form by firebase ID
  public getFormByID(formID: string): void {
    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    const getFormSub = formsCollection
      .doc(formID)
      .get()
      .subscribe((response: DocumentSnapshot<IForm> | any) => {
        const form: IForm = response.data();
        console.log(form);
      })

    this.subscriptions.add(getFormSub);
  }

  public getFormsByTemplateID(templateID: number): AngularFirestoreCollection<IForm> {
    const locationDoc = this.afs.collection('accounts').doc(this.orgId).collection('locations').doc(this.locationId);

    const formsByFormTemplateID: AngularFirestoreCollection<IForm> = locationDoc
      .collection('forms', forms => forms
      .where('TemplateID', "==", templateID));


    let subSub = formsByFormTemplateID
      .valueChanges()
      .subscribe((response: IForm[]) => {
        console.log(response);
      },
      (err) => {
        console.log(err);
      })

    this.subscriptions.add(subSub);

    return formsByFormTemplateID;
  }

  public createForm(): void {
    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    let newFormRef: any = formsCollection.doc().ref;
    const newForm = this.getNewAutoGeneratedForm(newFormRef.id);

    formsCollection.doc(newFormRef.id).set(newForm)
      .then((response: void) => {
        console.log(response);
      })
      .catch(err => {
        console.log(err);
      })
  }

  public updateForm(formID: string, formIndex: number, newSectionName: string): void {
    const formDataToUpdate: IForm = { ...this.formsByLocation[formIndex] };
    formDataToUpdate["section0"]["row0"]["column0"].name = newSectionName;

    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    formsCollection
      .doc(formID)
      .update(formDataToUpdate);
  }

  public deleteForm(formID: string): void {
    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    formsCollection.doc(formID).delete();
  }

  private setupFirestoreFormsListener(): void {
    if (this.firestoreFormsSubscription) this.firestoreFormsSubscription.unsubscribe()

    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    this.firestoreFormsSubscription = formsCollection
      .valueChanges()
      .subscribe((response: IForm[] | any) => {
        this.formsByLocation = response;
      })
  }

  private getFormsCollection(): AngularFirestoreCollection<IForm> {
    const locationDoc = this.afs.collection('accounts').doc(this.orgId).collection('locations').doc(this.locationId);
    return locationDoc.collection('forms');
  }

  private getNewAutoGeneratedForm(formID: string): IForm {
    return {
      ID: formID,
      TemplateID: 60000,
      Section0: {
        Settings: { ID: 0, Title: 'Animals' },
        Row0: { 'Column0': { Name: 'name-pup-count', Type: DraggedElementType.Number, Value: 512, Settings: { Required: true } }, 'column1': { Name: 'name-bird', Type: DraggedElementType.Text, Value: 'bird', Settings: { Required: true } } }, // row 0
        Row1: { 'Column0': { Name: 'name-date-time', Type: DraggedElementType.DateTime, Value: { Date: '2018-07-22', Time: '13:30' }, Settings: { Required: true } }, 'column1': { Name: 'name-monkey', Type: DraggedElementType.Text, Value: 'monkey', Settings: { Required: true } } }, // row 1
        Row2: { 'Column0': { Name: 'name-multiSelect', Type: DraggedElementType.MultiSelect, Value: [{ Value: 'one', Checked: false }, { Value: 'two', Checked: false }, { Value: 'three', Checked: false }], Settings: { Required: true } }, 'column1': { Name: 'name-singleSelect', Type: DraggedElementType.SingleSelect, Value: [{ Value: 'one', Checked: false }, { Value: 'two', Checked: false }, { Value: 'three', Checked: false }], Settings: { Required: true } } }, // row 2
      },
      Section1: {
        Settings: { ID: 1, Title: 'Colors' },
        Row0: { 'Column0': { Name: 'blue label', Type: DraggedElementType.Text, Value: 'blue', Settings: { Required: true } }, 'column1': { Name: 'orange label', Type: DraggedElementType.Text, Value: 'orange', Settings: { Required: true } } }, // row 0
        Row1: { 'Column0': { Name: 'red label', Type: DraggedElementType.Text, Value: 'red', Settings: { Required: true } }, 'column1': { Name: 'purple label', Type: DraggedElementType.Text, Value: 'purple', Settings: { Required: true } } }, // row 1
        Row2: { 'Column0': { Name: 'yellow label', Type: DraggedElementType.Text, Value: 'yellow', Settings: { Required: true } }, 'column1': { Name: 'pink label', Type: DraggedElementType.Text, Value: 'pink', Settings: { Required: true } } }, // row 2
      }
    }
  }

}