import { Component, OnDestroy, OnInit } from "@angular/core";
import { AngularFirestoreCollection, AngularFirestore } from "@angular/fire/compat/firestore";
import { Subscription } from "rxjs";

import { DraggedElementType, IForm } from "./form-types";

export interface IUpdateTask {
  Name?: string
  DueDate?: string
  ExpireDate?: string
  CurrentStatus?: string
  ID?: string; // id of document in firestore
}

@Component({
  selector: 'forms',
  templateUrl: './forms.component.html',
})
export class FormsComponent implements OnInit, OnDestroy {
  public tasksByLocation: IForm[] = [];

  private orgId = '96';
  private locationId = '107';
  private todayStr = "2022-04-18"; // TODO update to see today's stuff
  private subscriptions = new Subscription();

  constructor(private afs: AngularFirestore) {}
  
  public ngOnInit(): void {
    this.setupLocationDbListener();
  }

  public ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
  }

  public getTaskByID(taskID: string): void {
    // const tasksCollection: AngularFirestoreCollection<ITask> = this.getTasksCollection(false);
    // const getTaskSub = tasksCollection
    //   .doc(taskID)
    //   .get()
    //   .subscribe((response: DocumentSnapshot<ITask> | any) => {
    //     const task: ITask = response.data();
    //   })

    // this.subscriptions.add(getTaskSub);
  }

  public createForm(): void {
    const formsCollection: AngularFirestoreCollection<IForm> = this.getFormsCollection();
    let newFormRef: any = formsCollection.doc().ref;
    const newForm = this.getNewAutoGeneratedForm();

    formsCollection.doc(newFormRef.id).set(newForm)
      .then((response: void) => {
        console.log(response);
      })
      .catch(err => {
        console.log(err);
      })
  }

  public updateTask(taskID: string, taskDataToUpdate: IUpdateTask): void {
    // const tasksCollection: AngularFirestoreCollection<ITask> = this.getTasksCollection(false);
    // tasksCollection
    //   .doc(taskID)
    //   .update(taskDataToUpdate as ITask);
  }

  public deleteTask(taskID: string): void {
    // const tasksCollection: AngularFirestoreCollection<ITask> = this.getTasksCollection(false);
    // tasksCollection.doc(taskID).delete();
  }

  public testBatchWrites(): void {
    // const tasksCollection: AngularFirestoreCollection<ITask> = this.getTasksCollection(false);
    // // Get a new write batch
    // const batch = this.afs.firestore.batch();

    // let newTaskList = [this.getNewAutoGeneratedTask('yo'), this.getNewAutoGeneratedTask('human'), this.getNewAutoGeneratedTask('pup')];

    // newTaskList.forEach((newTask: ITask) => {
    //   let newTaskRef = tasksCollection.doc().ref;
    //   newTask.ID = newTaskRef.id;
    //   batch.set(newTaskRef, newTask);
    // })

    // batch.commit();
  }

  private setupLocationDbListener(): void {
    // const tasksCollection: AngularFirestoreCollection<ITask> = this.getTasksCollection(true);
    // const tasksDBSub = tasksCollection
    //   .valueChanges()
    //   .subscribe((response: ITask[] | any) => {
    //     this.tasksByLocation = response;
    //   })

    // this.subscriptions.add(tasksDBSub);
  }

  private getFormsCollection(): AngularFirestoreCollection<IForm> {
    const locationDoc = this.afs.collection('accounts').doc(this.orgId).collection('locations').doc(this.locationId);
    return locationDoc.collection('forms');
  }

  private getNewAutoGeneratedForm(): IForm {
    return {
        section1: {
          settings: { id: 150, title: 'Animals' },
          row1: { 'column0': { name: 'name-pup-count', type: DraggedElementType.number, value: 512, settings: { required: true } }, 'column1': { name: 'name-bird', type: DraggedElementType.text, value: 'bird', settings: { required: true } } }, // row 0
          row2: { 'column0': { name: 'name-date-time', type: DraggedElementType.dateTime, value: { date: '2018-07-22', time: '13:30' }, settings: { required: true } }, 'column1': { name: 'name-monkey', type: DraggedElementType.text, value: 'monkey', settings: { required: true } } }, // row 1
          row3: { 'column0': { name: 'name-multiSelect', type: DraggedElementType.multiSelect, value: [{ value: 'one', checked: false }, { value: 'two', checked: false }, { value: 'three', checked: false }], settings: { required: true } }, 'column1': { name: 'name-singleSelect', type: DraggedElementType.singleSelect, value: [{ value: 'one', checked: false }, { value: 'two', checked: false }, { value: 'three', checked: false }], settings: { required: true } } }, // row 2
        },
        section2: {
          settings: { id: 151, title: 'Colors' },

        }
      }
  }

}